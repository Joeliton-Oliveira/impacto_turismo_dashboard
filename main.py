import streamlit as st

from style.estilos import aplicar_estilo
from components.layout import exibir_cabecalho
from data.carregamento_dados import carregar_dados
from components.filtros import aplicar_filtros
from components.metricas import exibir_metricas
from components.charts.bar_chart import exibir_grafico_barras
from components.charts.pie_chart import exibir_grafico_pizza
from components.charts.heatmap import exibir_heatmap
from components.charts.scatter_plot import exibir_grafico_dispersao
from components import tratamento_de_dados_xlsx as tratamento

# Configura√ß√µes iniciais da p√°gina
st.set_page_config(
    page_title="Impacto do Turismo nas Cidades",
    layout="wide"
)

# Aplica√ß√£o do tema visual
aplicar_estilo()

# ======= Menu de Navega√ß√£o na Sidebar (fica acima dos filtros) =======
menu = st.sidebar.radio(
    "Menu de Navega√ß√£o",
    ["Dashboard", "Relat√≥rio"]
)
# ====================================================================

# Bot√£o para atualizar os dados
if st.sidebar.button("Atualizar Dados da Planilha"):
    tratamento.atualizar_dados()
    st.sidebar.success("‚úÖ Dados atualizados com sucesso!")

# Exibi√ß√£o do cabe√ßalho com logo e t√≠tulo
exibir_cabecalho()

# Carregamento dos dados
df = carregar_dados()

# Filtros e dados filtrados (os filtros ficam SEMPRE na sidebar)
df_filtrado, filtros = aplicar_filtros(df)

# Dependendo do menu, muda o conte√∫do central:
if menu == "Dashboard":
    # Verifica se filtros essenciais foram aplicados
    if not filtros["cidade"] or not filtros["tipo_impacto"] or df_filtrado.empty:
        st.info("Nenhum dado encontrado. Selecione ao menos uma cidade e um tipo de impacto para gerar os gr√°ficos.")
    else:
        # Exibi√ß√£o de m√©tricas principais
        exibir_metricas(df_filtrado)

        # Gera√ß√£o dos gr√°ficos (agora com filtros corretamente passados)
        exibir_grafico_barras(df_filtrado, filtros)
        exibir_grafico_pizza(df_filtrado)
        exibir_heatmap(df_filtrado)
        exibir_grafico_dispersao(df_filtrado)

        # Legenda visual
        st.markdown("### Legenda Visual")
        st.markdown("- üü¶ **Positivo:** Impactos com expectativa ou resultado ben√©fico")
        st.markdown("- üüß **Negativo:** Impactos com expectativa ou resultado prejudicial")
        st.markdown("- ‚ö™ **Neutro:** Respostas intermedi√°rias ou avaliativas (pode ser inclu√≠do se houver)")

elif menu == "Relat√≥rio":
    # Importa corretamente da pasta components
    from components.relatorio import gerar_relatorio
    gerar_relatorio(df_filtrado, filtros)
